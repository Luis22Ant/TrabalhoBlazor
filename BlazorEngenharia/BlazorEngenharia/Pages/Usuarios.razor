@page "/usuarios"
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject HttpClient Http;


<h1>Tela de usuários</h1>
<button id="BtnAddUser" class="btn btn-success" @onclick="@AddUser">Adicionar usuário</button>
<style>
    #GdvDoador th {
        border: 1px solid black;
        padding: 5px;
    }

    #GdvDoador td {
        border: 1px solid black;
        padding: 5px;
    }

    #GdvDoador {
        margin-top: 2rem;
    }

    #BtnAddUser {
        margin-bottom: 2rem;
    }
</style>

@if (Loading)
{
    <p>Carregando...</p>
}
else if (usuarios != null)
{
    <table id="GdvDoador">
        <thead>
            <tr>
                <th></th>
                <th></th>
                <th></th>
                <th>Id</th>
                <th>Nome</th>
                <th>Login</th>
                <th>Senha</th>
                <th>Tipo</th>
                <th>Data Criação</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in usuarios)
            {
                <tr>
                    <td><a style="cursor: pointer;" @onclick="() => ViewUser(item.Id)"><i class="fas fa-eye"></i></a></td>
                    <td><a style="cursor: pointer;" @onclick="() => UpdateUser(item.Id)"><i class="fas fa-pen"></i></a></td>
                    <td><a style="cursor: pointer;" @onclick="() => DeleteUsuario(item.Id)"><i class="fa-solid fa-trash"></i></a></td>
                    <td>@item.Id</td>
                    <td>@item.Nome</td>
                    <td>@item.Login</td>
                    <td>@item.Senha</td>
                    <td>@item.TipoAcesso</td>
                    <td>@item.DataCriacao</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    List<Usuario> usuarios = new List<Usuario>();
    private bool Loading = true;
    private Usuario user = new Usuario();
    async Task GetUsuarios()
    {
        try
        {

            var response = await Http.GetFromJsonAsync<List<Usuario>>("https://localhost:7165/api/Usuario");



            if (response != null)
            {
                usuarios = response;
            }
        }
        catch (Exception ex)
        {
            ex.ToString();
        }

        finally
        {
            Loading = false;
        }
    }

    public void AddUser()
    {
        NavigationManager.NavigateTo("/adicionarUsuario");
    }

    public void UpdateUser(int id)
    {
        NavigationManager.NavigateTo($"/atualizarUsuario/{id}");
    }

    public void ViewUser(int id)
    {
        NavigationManager.NavigateTo("/adicionarUsuario");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUsuarios();
    }

    async Task DeleteUsuario(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7165/api/Usuario/{id}");

            if (response.IsSuccessStatusCode)
            {

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Deu bom");
                    await GetUsuarios();
                }
                else
                {
                    Console.WriteLine("Deu ruim");
                }

            }
            else
            {
                Console.WriteLine($"Falha na requisição DELETE. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao excluir doador: {ex.Message}");
        }
    }


    public class ApiResponse
    {
        public List<Usuario> DoadorList { get; set; }
    }

    public class DeleteResponse
    {
        public bool Result { get; set; }
    }

    public class Usuario
    {
        public int Id { get; set; }

        public string Nome { get; set; } = string.Empty;
        public string Login { get; set; } = string.Empty;
        public string Senha { get; set; } = string.Empty;
        public TipoAcesso TipoAcesso { get; set; }
        public string UltimoAcesso { get; set; } = string.Empty;
        public string DataCriacao { get; set; } = string.Empty;
    }

    public enum TipoAcesso
    {
        Admin = 0,
        Usuario = 1
    }
}
